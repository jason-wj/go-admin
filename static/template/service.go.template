package service

import (
	"errors"
    "time"
    "fmt"
    "go-admin/common/core/sdk/service"
    adminService "go-admin/app/admin/service"
	"gorm.io/gorm"

	"go-admin/app/{{.PackageName}}/models"
	"go-admin/app/{{.PackageName}}/service/dto"
	"go-admin/common/actions"
	"github.com/360EntSecGroup-Skylar/excelize"
	cDto "go-admin/common/dto"
)

type {{.ClassName}} struct {
	service.Service
}

// GetPage 获取{{.ClassName}}列表
func (e *{{.ClassName}}) GetPage(c *dto.{{.ClassName}}QueryReq, p *actions.DataPermission, list *[]models.{{.ClassName}}, count *int64) error {
	var err error
	var data models.{{.ClassName}}

	err = e.Orm.Order("created_at desc").Model(&data).
		Scopes(
			cDto.MakeCondition(c.GetNeedSearch()),
			cDto.Paginate(c.GetPageSize(), c.GetPageIndex()),
			actions.Permission(data.TableName(), p),
		).
		Find(list).Limit(-1).Offset(-1).
		Count(count).Error
	if err != nil {
		e.Log.Errorf("{{.ClassName}}Service GetPage error:%s \r\n", err)
		return err
	}
	return nil
}

// Get 获取{{.ClassName}}对象
func (e *{{.ClassName}}) Get(id int64, p *actions.DataPermission, model *models.{{.ClassName}}) error {
    if id<=0 {
		return errors.New("编号不得为空！")
	}
	var data models.{{.ClassName}}
	var err error
    err = e.Orm.Model(&data).
        Scopes(
            actions.Permission(data.TableName(), p),
        ).First(model, id).Error
	if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
		err = errors.New("查看对象不存在或无权查看")
		e.Log.Errorf("Service Get{{.ClassName}} error:%s \r\n", err)
		return err
	}
	if err != nil {
		e.Log.Errorf("db error:%s", err)
		return err
	}
	return nil
}

// QueryOne 通过自定义条件获取一条记录
func (e *{{.ClassName}}) QueryOne(queryCondition *dto.{{.ClassName}}QueryReq, p *actions.DataPermission, model *models.{{.ClassName}}) error {
	var data models.{{.ClassName}}
	err := e.Orm.Model(&data).
		Scopes(
			cDto.MakeCondition(queryCondition.GetNeedSearch()),
			actions.Permission(data.TableName(), p),
		).First(model).Error
	if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
		e.Log.Errorf("Service QueryOne error:%s \r\n", err)
		return errMsg.NotFount
	}
	if err != nil {
		e.Log.Errorf("db error:%s", err)
		return err
	}
	return nil
}

// Insert 创建{{.ClassName}}对象
func (e *{{.ClassName}}) Insert(c *dto.{{.ClassName}}InsertReq, createUserId string) error {
    var err error
    var data models.{{.ClassName}}
    c.CreateBy = createUserId
    c.UpdateBy = createUserId
    now := time.Now()
    c.CreatedAt = &now
    c.UpdatedAt = &now

    c.Generate(&data)
	err = e.Orm.Create(&data).Error
	if err != nil {
		e.Log.Errorf("{{.ClassName}}Service Insert error:%s \r\n", err)
		return err
	}
	return nil
}

// Update 修改{{.ClassName}}对象
func (e *{{.ClassName}}) Update(c *dto.{{.ClassName}}UpdateReq, p *actions.DataPermission, updateUserId string) (bool,error) {
    var err error
    var data = models.{{.ClassName}}{}

    err = e.Get(c.Id, p, &data)
    if err != nil {
        return false, errors.New("当前数据不存在！")
    }

    //最小化变更改动过的数据
    update := map[string]interface{}{}

    //TODO 利用data.xx和传入的c.xx比较数据是否一致，不一致则加入变更
    /*if data.xxx != c.xxx{
    		update["x_xx"] = c.xxx
    }*/

	if len(update)>0 {
        update["updated_at"] = time.Now()
        update["update_by"] = updateUserId
        db := e.Orm.Model(&data).Where("id=?",data.Id).Updates(&update)
        if db.Error != nil {
            e.Log.Errorf("{{.ClassName}}Service Save error:%s \r\n", err)
            return false, errors.New(fmt.Sprintf("更新错误：%s", err.Error()))
        }
        if db.RowsAffected == 0 {
            return false, errors.New("无权更新该数据")
        }
        return true,nil
    }
    return false,nil
}

// Remove 删除{{.ClassName}}
func (e *{{.ClassName}}) Remove(id int64, p *actions.DataPermission) error {
	if id<=0{
    		return errors.New("编号不得为空")
    }
	var data models.{{.ClassName}}

	db := e.Orm.Model(&data).
		Scopes(
			actions.Permission(data.TableName(), p),
		).Delete(&data, id)
	if err := db.Error; err != nil {
        e.Log.Errorf("Service Remove{{.ClassName}} error:%s \r\n", err)
        return err
    }
    if db.RowsAffected == 0 {
        return errors.New("无权删除该数据")
    }
	return nil
}

// GetExcel 导出excel{{.ClassName}}
func (e *{{.ClassName}}) GetExcel(list []models.{{.ClassName}}) ([]byte, error) {
	sheetName := "{{.ClassName}}"
	xlsx := excelize.NewFile()
	no := xlsx.NewSheet(sheetName)
	xlsx.SetColWidth(sheetName, "A", "L", 25)
	xlsx.SetSheetRow(sheetName, "A1", &[]interface{}{
		"xx编号", "", "", "", "", "", "",
		"", "", "", "", ""})
	dictService := adminService.SysDictData{}
	dictService.Orm = e.Orm
	dictService.Log = e.Log
	for i, item := range list {
		axis := fmt.Sprintf("A%d", i+2)
		//TODO 业务处理
		//TODO 字典获取，如：moneyType := dictService.GetLabel("test_money_type", item.Type)

		//按标签对应输入数据
		xlsx.SetSheetRow(sheetName, axis, &[]interface{}{
		    item.Id,
		})
	}
	xlsx.SetActiveSheet(no)
	data, _ := xlsx.WriteToBuffer()
	return data.Bytes(), nil
}
