package service

import (
	"errors"
    "time"
    "fmt"
    "go-admin/common/core/sdk/service"
     adminService "go-admin/app/admin/service"
	"gorm.io/gorm"

	"go-admin/app/{{.PackageName}}/models"
	"go-admin/app/{{.PackageName}}/service/dto"
	"go-admin/common/actions"
	"github.com/360EntSecGroup-Skylar/excelize"
	cDto "go-admin/common/dto"
)

type {{.ClassName}} struct {
	service.Service
}

//
// NewArticleService
// @Description: 实例化{{.ClassName}}
// @param s
// @return *Article
//
func New{{.ClassName}}Service(s *service.Service) *{{.ClassName}} {
	var srv = new({{.ClassName}})
	srv.Orm = s.Orm
	srv.Log = s.Log
	return srv
}

//
// GetPage
// @Description: 获取{{.ClassName}}列表
// @receiver e
// @param c
// @param p
// @return []models.{{.ClassName}}
// @return int64 数量
// @return error
//
func (e *{{.ClassName}}) GetPage(c *dto.{{.ClassName}}QueryReq, p *actions.DataPermission) ([]models.{{.ClassName}},int64,error) {
	var err error
	var data models.{{.ClassName}}
    var list []models.{{.ClassName}}

	err = e.Orm.Order("created_at desc").Model(&data).
		Scopes(
			cDto.MakeCondition(c.GetNeedSearch()),
			cDto.Paginate(c.GetPageSize(), c.GetPageIndex()),
			actions.Permission(data.TableName(), p),
		).Find(list).Limit(-1).Offset(-1).Count(count).Error
	if err != nil {
		e.Log.Errorf("{{.ClassName}}Service GetPage error:%s \r\n", err)
		return nil, 0, err
	}
	return list, count, nil
}

//
// Get
// @Description: 获取{{.ClassName}}对象
// @receiver e
// @param id 编号
// @param p
// @return *models.{{.ClassName}}
// @return error
//
func (e *{{.ClassName}}) Get(id int64, p *actions.DataPermission, model *models.{{.ClassName}}) (*models.{{.ClassName}}, error) {
    if id<=0 {
		return errors.New("编号不得为空！")
	}
	var data models.{{.ClassName}}
	var err error
    err = e.Orm.Model(&data).
        Scopes(
            actions.Permission(data.TableName(), p),
        ).First(model, id).Error
	if err != nil {
		return nil, errors.New(fmt.Sprintf("数据不存在或无权查看该数据%s", err))
	}
	return model, nil
}

//
// QueryOne
// @Description: 通过自定义条件获取{{.ClassName}}一条记录
// @receiver e
// @param queryCondition 条件
// @return *models.{{.ClassName}}
// @return error
//
func (e *{{.ClassName}}) QueryOne(queryCondition *dto.{{.ClassName}}QueryReq, p *actions.DataPermission) (*models.{{.ClassName}}, error) {
	var data models.{{.ClassName}}
	err := e.Orm.Model(&data).
		Scopes(
			cDto.MakeCondition(queryCondition.GetNeedSearch()),
			actions.Permission(data.TableName(), p),
		).First(model).Error
	if err != nil {
		return nil, errors.New(fmt.Sprintf("数据不存在或无权查看该数据%s", err))
	}
	return nil
}

//
// Insert
// @Description: 创建{{.ClassName}}对象
// @receiver e
// @param c
// @return error
//
func (e *{{.ClassName}}) Insert(c *dto.{{.ClassName}}InsertReq) error {
    now := time.Now()
    var data models.{{.ClassName}}
    {{- range .Columns }}
    data.{{.GoField}} = c.{{.GoField}}
    {{- end }}
    data.CreateBy = c.CurrUserId
    data.UpdateBy = c.CurrUserId
    data.CreatedAt = &now
    data.UpdatedAt = &now
	err := e.Orm.Create(&data).Error
	if err != nil {
		e.Log.Errorf("{{.ClassName}}Service Insert error:%s \r\n", err)
		return err
	}
	return nil
}

//
// Update
// @Description: 修改{{.ClassName}}对象
// @receiver e
// @param c
// @param p
// @return bool 是否有数据更新
// @return error
//
func (e *{{.ClassName}}) Update(c *dto.{{.ClassName}}UpdateReq, p *actions.DataPermission) (bool,error) {
    if c.Id <= 0 || c.CurrUserId <= 0 {
    	return false, errors.New("参数错误")
    }
	data, err := e.Get(c.Id, p)
	if err != nil {
		return false, errors.New("当前数据不存在！")
	}

    //最小化变更改动过的数据
    updates := map[string]interface{}{}

    {{- range .Columns }}
    {{- if eq .GoField "Id" -}}
    {{- else if eq .GoField "CreatedAt" -}}
    {{- else if eq .GoField "UpdatedAt" -}}
    {{- else if eq .GoField "CreateBy" -}}
    {{- else if eq .GoField "UpdateBy" -}}
    {{- else }}
    if data.{{.GoField}} != c.{{.GoField}}{
       updates["{{.ColumnName}}"] = c.{{.GoField}}
    }
    {{- end -}}
    {{- end }}

	if len(updates)>0 {
        updates["updated_at"] = time.Now()
        updates["update_by"] = c.CurrUserId
        db := e.Orm.Model(&data).Where("id=?",data.Id).Updates(&updates)
        if err != nil {
            e.Log.Errorf("{{.ClassName}}Service Update error:%s", err)
            return false, err
        }
        return true,nil
    }
    return false,nil
}

//
// Remove
// @Description: 删除{{.ClassName}}
// @receiver e
// @param ids
// @param p
// @return error
//
func (e *{{.ClassName}}) Remove(ids []int64, p *actions.DataPermission) error {
	if len(ids) <= 0 {
		return errors.New("参数错误")
	}
	var data models.{{.ClassName}}
	err := e.Orm.Model(&data).
		Scopes(
			actions.Permission(data.TableName(), p),
		).Delete(&data, id).Error
	if err != nil {
		return errors.New(fmt.Sprintf("数据不存在或无权删除该数据%s", err))
	}
	return nil
}

//
// GetExcel
// @Description: GetExcel 导出{{.ClassName}} excel数据
// @receiver e
// @param list
// @return []byte
// @return error
//
func (e *{{.ClassName}}) GetExcel(list []models.{{.ClassName}}) ([]byte, error) {
	sheetName := "{{.ClassName}}"
	xlsx := excelize.NewFile()
	no := xlsx.NewSheet(sheetName)
	xlsx.SetColWidth(sheetName, "A", "L", 25)
	xlsx.SetSheetRow(sheetName, "A1", &[]interface{}{
		"编号", "", "", "", "", "", "",
		"", "", "", "", ""})
	dictService := adminService.SysDictData{}
	dictService.Orm = e.Orm
	dictService.Log = e.Log
	for i, item := range list {
		axis := fmt.Sprintf("A%d", i+2)
		//TODO 业务处理
		//TODO 字典获取，如：moneyType := dictService.GetLabel("test_money_type", item.Type)

		//按标签对应输入数据
		xlsx.SetSheetRow(sheetName, axis, &[]interface{}{
		    item.Id,
		})
	}
	xlsx.SetActiveSheet(no)
	data, _ := xlsx.WriteToBuffer()
	return data.Bytes(), nil
}
