package apis

import (
    "fmt"
    "strconv"
	"github.com/gin-gonic/gin"
	adminService "go-admin/app/admin/service"
	"go-admin/common/core/sdk/api"
	"go-admin/common/middleware/handler/user"
	_ "go-admin/common/core/sdk/pkg/response"

	"go-admin/app/{{.PackageName}}/models"
	"go-admin/app/{{.PackageName}}/service"
	"go-admin/app/{{.PackageName}}/service/dto"
	"go-admin/common/actions"
)

type {{.ClassName}} struct {
	api.Api
}

// GetPage 获取{{.TableComment}}列表
// @Summary 获取{{.TableComment}}列表
// @Description 获取{{.TableComment}}列表
// @Tags {{.TableComment}}
{{- $tablename := .TBName -}}
{{- range .Columns -}}
{{$z := .IsQuery}}
{{- if ($z) }}
// @Param {{.JsonField}} query {{.GoType}} false "{{.ColumnComment}}"
{{- end -}}
{{- end }}
// @Param pageSize query int false "页条数"
// @Param pageIndex query int false "页码"
// @Success 200 {object} response.Response{data=response.Page{list=[]models.{{.ClassName}}}} "{"code": 200, "data": [...]}"
// @Router /admin-api/v1/{{.ModuleName}} [get]
// @Security Bearer
func (e {{.ClassName}}) GetPage(c *gin.Context) {
    req := dto.{{.ClassName}}QueryReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
   	if err != nil {
   		e.Logger.Error(err)
   		e.Error(500,  err.Error())
   		return
   	}

	p := actions.GetPermissionFromContext(c)
	list := make([]models.{{.ClassName}}, 0)
	var count int64

	err = s.GetPage(&req, p, &list, &count)
	if err != nil {
		e.Error(500,  fmt.Sprintf("获取{{.TableComment}} 失败，\r\n失败信息 %s", err.Error()))
        return
	}

	e.PageOK(list,nil, int(count), req.GetPageIndex(), req.GetPageSize(), "查询成功")
}

// Get 获取{{.TableComment}}
// @Summary 获取{{.TableComment}}
// @Description 获取{{.TableComment}}
// @Tags {{.TableComment}}
// @Param id path string false "id"
// @Success 200 {object} response.Response{data=models.{{.ClassName}}} "{"code": 200, "data": [...]}"
// @Router /admin-api/v1/{{.ModuleName}}/{id} [get]
// @Security Bearer
func (e {{.ClassName}}) Get(c *gin.Context) {
	req := dto.{{.ClassName}}GetReq{}
	s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
		MakeOrm().
		Bind(&req).
		MakeService(&s.Service).
		Errors
	if err != nil {
		e.Logger.Error(err)
		e.Error(500,  err.Error())
		return
	}
	var object models.{{.ClassName}}

	p := actions.GetPermissionFromContext(c)
	err = s.Get(req.Id, p, &object)
	if err != nil {
		e.Error(500,  fmt.Sprintf("获取{{.TableComment}}失败，\r\n失败信息 %s", err.Error()))
        return
	}

	e.OK( object, "查询成功")
}

// Insert 创建{{.TableComment}}
// @Summary 创建{{.TableComment}}
// @Description 创建{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param data body dto.{{.ClassName}}InsertReq true "data"
// @Success 200 {object} response.Response	"{"code": 200, "message": "添加成功"}"
// @Router /admin-api/v1/{{.ModuleName}} [post]
// @Security Bearer
func (e {{.ClassName}}) Insert(c *gin.Context) {
    req := dto.{{.ClassName}}InsertReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }

    uid, rCode, err := auth.GetUserId(c)
    if err != nil {
        e.Error(rCode,  err.Error())
        return
    }

	err = s.Insert(&req,uid)
	if err != nil {
		e.Error(500,  err.Error())
        return
	}

	e.OK(req.Id, "创建成功")
}

// Update 修改{{.TableComment}}
// @Summary 修改{{.TableComment}}
// @Description 修改{{.TableComment}}
// @Tags {{.TableComment}}
// @Accept application/json
// @Product application/json
// @Param data body dto.{{.ClassName}}UpdateReq true "body"
// @Success 200 {object} response.Response	"{"code": 200, "message": "修改成功"}"
// @Router /admin-api/v1/{{.ModuleName}}/{id} [put]
// @Security Bearer
func (e {{.ClassName}}) Update(c *gin.Context) {
    req := dto.{{.ClassName}}UpdateReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }
	p := actions.GetPermissionFromContext(c)

    uid, rCode, err := auth.GetUserId(c)
    if err != nil {
        e.Error(rCode,  err.Error())
        return
    }
	b, err := s.Update(&req, p, uid)
	if err != nil {
		e.Error(500,  fmt.Sprintf("%s", err.Error()))
        return
	}
	if !b{
        e.OK(req.Id, "未修改任何信息")
        return
	}
	e.OK(req.Id, "修改成功")
}

// Delete 删除{{.TableComment}}
// @Summary 删除{{.TableComment}}
// @Description 删除{{.TableComment}}
// @Tags {{.TableComment}}
// @Param id body int false "id"
// @Success 200 {object} response.Response	"{"code": 200, "message": "删除成功"}"
// @Router /admin-api/v1/{{.ModuleName}} [delete]
// @Security Bearer
func (e {{.ClassName}}) Delete(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}DeleteReq{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }

	p := actions.GetPermissionFromContext(c)

	err = s.Remove(req.Id, p)
	if err != nil {
		e.Error(500,  err.Error())
        return
	}
	e.OK( req.Id, "删除成功")
}


// Export 导出{{.TableComment}}
// @Summary 导出{{.TableComment}}
// @Description 导出{{.TableComment}}
// @Router /admin-api/v1/{{.ModuleName}} [get]
// @Security Bearer
func (e {{.ClassName}}) Export(c *gin.Context) {
    req := dto.{{.ClassName}}QueryReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
   	if err != nil {
   		e.Logger.Error(err)
   		e.Error(500,  err.Error())
   		return
   	}

	var sysConfService = adminService.NewSysConfigService(&e.Service)

	//最小规格数
	maxSize, err := strconv.Atoi(sysConfService.GetWithKeyStr("test_sys_max_export_size","1000"))
	if err != nil {
		e.Error(500,  fmt.Sprintf("配置读取异常：%s", err.Error()))
		return
	}
    p := actions.GetPermissionFromContext(c)
    list := make([]models.{{.ClassName}}, 0)
    var count int64
	req.PageIndex = 1
	req.PageSize = maxSize
	err = s.GetPage(&req, p, &list, &count)
    if err != nil {
        e.Error(500,  err.Error())
        return
    }
	data, _ := s.GetExcel(list)
	e.ExportExcelOk(data)
}
