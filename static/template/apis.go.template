package apis

import (
	"fmt"
	"github.com/gin-gonic/gin"
	adminService "go-admin/app/admin/service"
	"go-admin/app/pha/models"
	"go-admin/app/pha/service"
	"go-admin/app/pha/service/dto"
	"go-admin/common/actions"
	"go-admin/common/core/sdk/api"
	_ "go-admin/common/core/sdk/pkg/response"
	"go-admin/common/middleware/auth"
	"go-admin/common/utils/dateUtils"
	"strconv"
	"time"
)

type {{.ClassName}} struct {
	api.Api
}

//
// GetPage
// @Description: 获取{{.TableComment}}列表
// @receiver e
// @param c
//
func (e {{.ClassName}}) GetPage(c *gin.Context) {
    req := dto.{{.ClassName}}QueryReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
   	if err != nil {
   		e.Logger.Error(err)
   		e.Error(500,  err.Error())
   		return
   	}
	p := actions.GetPermissionFromContext(c)
	list := make([]models.{{.ClassName}}, 0)
	var count int64
	list, count, err = s.GetPage(&req, p)
	if err != nil {
		e.Error(500,  fmt.Sprintf("获取{{.TableComment}} 失败，\r\n失败信息 %s", err.Error()))
        return
	}
	e.PageOK(list,nil, int(count), req.GetPageIndex(), req.GetPageSize(), "查询成功")
}

//
// Get
// @Description: 获取{{.TableComment}}
// @receiver e
// @param c
//
func (e {{.ClassName}}) Get(c *gin.Context) {
	req := dto.{{.ClassName}}GetReq{}
	s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
		MakeOrm().
		Bind(&req).
		MakeService(&s.Service).
		Errors
	if err != nil {
		e.Logger.Error(err)
		e.Error(500,  err.Error())
		return
	}
	p := actions.GetPermissionFromContext(c)
	object,err := s.Get(req.Id, p)
	if err != nil {
		e.Error(500,  fmt.Sprintf("获取{{.TableComment}}失败，\r\n失败信息 %s", err.Error()))
        return
	}
	e.OK( object, "查询成功")
}

//
// Insert
// @Description: 创建{{.TableComment}}
// @receiver e
// @param c
//
func (e {{.ClassName}}) Insert(c *gin.Context) {
    req := dto.{{.ClassName}}InsertReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }
    uid, rCode, err := auth.GetUserId(c)
    if err != nil {
        e.Error(rCode,  err.Error())
        return
    }
    req.CurrUserId = uid
	_, err = s.Insert(&req)
	if err != nil {
		e.Error(500,  err.Error())
        return
	}
	e.OK(req.Id, "创建成功")
}

//
// Update
// @Description: 修改{{.TableComment}}
// @receiver e
// @param c
//
func (e {{.ClassName}}) Update(c *gin.Context) {
    req := dto.{{.ClassName}}UpdateReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }
	p := actions.GetPermissionFromContext(c)
    uid, rCode, err := auth.GetUserId(c)
    if err != nil {
        e.Error(rCode,  err.Error())
        return
    }
    req.CurrUserId = uid
	b, err := s.Update(&req, p)
	if err != nil {
		e.Error(500,  fmt.Sprintf("%s", err.Error()))
        return
	}
	if !b{
        e.OK(req.Id, "未修改任何信息")
        return
	}
	e.OK(req.Id, "修改成功")
}

//
// Delete
// @Description:{{.TableComment}}
// @receiver e
// @param c
//
func (e {{.ClassName}}) Delete(c *gin.Context) {
    s := service.{{.ClassName}}{}
    req := dto.{{.ClassName}}DeleteReq{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
    if err != nil {
        e.Logger.Error(err)
        e.Error(500,  err.Error())
        return
    }
	p := actions.GetPermissionFromContext(c)
	err = s.Remove(req.Ids, p)
	if err != nil {
		e.Error(500,  err.Error())
        return
	}
	e.OK(req.Ids, "删除成功")
}

//
// Export
// @Description: 导出{{.TableComment}}
// @receiver e
// @param c
//
func (e {{.ClassName}}) Export(c *gin.Context) {
    req := dto.{{.ClassName}}QueryReq{}
    s := service.{{.ClassName}}{}
    err := e.MakeContext(c).
        MakeOrm().
        Bind(&req).
        MakeService(&s.Service).
        Errors
   	if err != nil {
   		e.Logger.Error(err)
   		e.Error(500,  err.Error())
   		return
   	}
	var sysConfService = adminService.NewSysConfigService(&s.Service)
	//最小规格数
	maxSize, err := strconv.Atoi(sysConfService.GetWithKeyStr("sys_max_export_size","1000"))
	if err != nil {
		e.Error(500,  fmt.Sprintf("配置读取异常：%s", err.Error()))
		return
	}
    p := actions.GetPermissionFromContext(c)
	req.PageIndex = 1
	req.PageSize = maxSize
	list,_,err := s.GetPage(&req, p)
    if err != nil {
        e.Error(500,  err.Error())
        return
    }
	data, _ := s.GetExcel(list)
	fileName := "{{.PackageName}}_{{.ModuleName}}_" + dateUtils.ConvertToStr(time.Now(), 3) + ".xlsx"
	e.DownloadExcel(fileName, data)
}
